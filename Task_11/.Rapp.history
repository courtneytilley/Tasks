lines(p, GenoFreq[,"ab"], lwd=2, col="red")
lines(p, GenoFreq[, "bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
Pop <- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop <- simPop(50)
points(Pop[,"freqa"], Pop[,"genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
install.packages(learnPopGen)
install.packages("learnPopGen")
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "1", xlab="generation", ylab="allele freq.", lwd='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plot(l:nrow(Pop1), Pop1[,l], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red')
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
lines(1:nrow( Pop1 ), Pop1[,2], lwd=2, col=’red’)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col=’red’)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red')
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
plot.new()
quartz()
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red')
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red')
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red'
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red'
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red'
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red'
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red'
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red'
lines1:nrow(Pop1), Pop1[,2], lwd=2, col='red'
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red'
lines 1:nrow(Pop1), Pop1[,2], lwd=2, col='red'
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red'
lines()
source("http://jonsmitchell.com/code/fxn05.R")#
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot (1:nrow (Pop1), Pop1 [,1], ylim=c (0,1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
lines (1:nrow (Pop1), Pop1 [,2], lwd=2, col='red')
source("http://jonsmitchell.com/code/fxn05.R")#
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)#
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd='red'#
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')#
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
results <- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
Avg <- mean(Chisqs)
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length( which( Chisqs > 11.70) ) / length(Chisqs)
percSig <- round(100 * propSig)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex. axis=1)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
hist(Chisqs, main="", xlab="chi-squared values", ylab="frequency")
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at = 1:length(backgrounds), labels = backgrounds)
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)
counter <- 1
for (i in backgrounds)  {
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
abline( v = 11.70, lyt=2, lwd = 2, col='black')
Simulation <- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v = 11.70, lyt=2, lwd=2)
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation3 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit) <- 1:6
Simulation4 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit) <- 1:6
Simulation5 <- SimDraws(1e4, w = Fit)
Simulation5 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation5, Color-rgb(0,0,0,0.25))
Fit <- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit) <- 1:6
Simulation6 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))
mtext(side=2, at=8, line=0, "sel. sim.")
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25))
install.packages("learnPopGen")
library("learnPopGen")
install.packages("coala")
library("coala")
install.packages("phytools")
library("phytools")
model <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats <- simulate(model, nsim = 1)
Diversity <- stats$pi
Nloci <- length(stats$trees)
t1 <- read.tree(text=stats$trees[[1]][1])
read(t1)
plot(t1)
axisPhylo()
plot(t1
axisPhylo()
plot(t1
axisPhylo)
Age1 <- read.tree(text=stats$trees[[2]][1])
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
compare.chronograms(t1, t2)
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
for (loacus in 1:Nloci)  {
ntrees <- length(stats$trees[[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree(text=stats$trees[[locus]][n])
}
else  {
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
par(mfrow=c(1,1))
densityTree(outPhy)
model3 <- coal_model(10, 50) +
feat_mutation(par_prior("theta", sample,int(100, 1))) +
sumstat_nucleotide_div()
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
setwd('C:\Users\Courtney Tilley\Desktop\Evolution\Project')
setwd('C:/Users/Courtney Tilley/Desktop/Evolution/Project')
setwd('/User/Tilley/Desktop/Evolution/Projects/Projects'')
read.csv('data.csv', stringsAsFactors=F)
setwd('/User/Courtney Tilley/Desktop/Evolution/Projects/Projects'')
setwd('/Users/Courtney Tilley/Desktop/Evolution/Projects/Projects'')
Data <- read.csv('data.csv', stringsAsFactors=F)
setwd('/Users/Courtney Tilley/Desktop/Evolution/Projects'')
Data <- read.csv('data.csv', stringsAsFactors=F)
setwd('/Users/Courtney Tilley/Desktop/Evolution/Projects')
source("http://jonsmitchell.com/code/reformatData07.R")#
source("http://jonsmitchell.com/code/simFxn.R")#
plot(1,1, type="n", xlim=c(1998, 2013), ylim=c(0,1))#
s <- apply(overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))#
rescaleFreq <- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x)x-x[1]#
plot(1,1, type="n", xlim=c(1998, 2013) ylim=c(-0.25, 0.25))#
s <- apply(rescaleFreq, 2, function(x) lines(overalFreq[,1], x, col=rgb(0,0,0,0.01)))#
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))#
dYear <- c()#
dAlleles <- c()#
for(i in 3:ncol(overalFreq)) {#
  dYear <- c(dYear, overallFreq[,1])#
  Vec <- overallFreq[,i]#
  Init <- overallFreq [1,i] #
  dAlleles <- c(dAllele, Vec - Init)#
}
source("http://jonsmitchell.com/code/reformatData07.R")#
source("http://jonsmitchell.com/code/simFxn.R")#
plot(1,1, type="n", xlim=c(1998, 2013), ylim=c(0,1))#
s <- apply(overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
rescaleFreq <- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x)x-x[1]#
plot(1,1, type="n", xlim=c(1998, 2013) ylim=c(-0.25, 0.25))#
s <- apply(rescaleFreq, 2, function(x) lines(overalFreq[,1], x, col=rgb(0,0,0,0.01)))#
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))#
dYear <- c()#
dAlleles <- c()#
for(i in 3:ncol(overalFreq)) {#
  dYear <- c(dYear, overallFreq[,1])#
  Vec <- overallFreq[,i]#
  Init <- overallFreq [1,i] #
  dAlleles <- c(dAllele, Vec - Init)#
}
text.string<-#
  "(((((((cow, pig), whale), bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)) ,shark);"
vert.tree<-read.tree(text=text.string)
vert.tree <- read.tree(text=text.string)
vert.tree<- read.tree(text=text.string)
vert.tree<- read.tree (text=text.string)
text.string<-#
  "(((((((cow, pig), whale), bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)) ,shark);"#
vert.tree<-read.tree(text=text.string)
install.packages("phytools",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("ape",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("phytools",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("ape",repos="https://cloud.r-project.org",quiet=TRUE)
text.string<-#
  "(((((((cow, pig), whale), bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)) ,shark);"#
vert.tree<-read.tree(text=text.string)
library(phytools)#
library(ape)
text.string<-#
  "(((((((cow, pig), whale), bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)) ,shark);"#
vert.tree<-read.tree(text=text.string)
text.string <-#
	'(((((((cow, pig), whale),(bat,(lemur, human))), (robin, iguana)), coelacanth#
	), (gold_fish, trout)), shark);'
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
nodelabels(frame='circle', bg='white', cex=1)
vert.tree
str(vert.tree)
plotTree(tree, offset=1)#
tiplabels(frame="circle", bg='lightblue', cex=1)#
nodelabels(frame="circle", bg='white', cex=1)
tree <- read.tree(text='(((A,B), (C,D)), E);')#
plotTree(tree, offset=1)#
tiplabels(frame='circle', bg='lightblue', cex=1)#
nodelabels(frame='circle', bg='white', cex=1)
tree$tip.label
tree$edge#
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))#
par(las=1)
AnolisTree <- force.ultrametric(read.tree('https://jonsmitchell.com/data/anolis.tre'))
par(las=1)#
hist(AnolisTree$edge.length, col='black', border='white', main='', xlab='edge lengths for Anolis tree', ylim=c(0,50), xlim=c(0,6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))#
Lengths <- AnolisTree$edge.length#
names(Lengths) <- AnolisTree$tip.label#
names(Lengths)[which(Lengths == min(Lengths))]
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))#
tipEdges#
Lengths <- AnolisTree$edge.length#
names(Lengths) <- AnolisTree$tip.label#
names(Lengths)[which(Lengths == min(Lengths))]
plot(AnolisTree, cex=0.25)#
Labs <- sapply(AnolisTree$edge.length, round, digits=2)#
edgelabels(text=Labs, cex=0.25)
tree <- read.tree(text='(((A,B), (C,D)), E);')#
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='purple')
plot.phylo(tree, type='radial')
plot.phylo(tree, tip.color = 'red')
plot(AnolisTree, cex=0.25)#
Labs <- sapply(AnolisTree$edge.length, round, digits=2)#
edgelabels(text=Labs, cex=0.25)#
which(Lengths == min(Lengths))
names(Lengths)#
AnolisTree2 <- drop.tip(AnolisTree, 'Anolis_occultus')#
plot(AnolisTree2, cex=0.25)
ltt(AnolisTree)#
abline(0, 1, lwd=2, col='red', lty=2)
fit.bd(AnolisTree, rho = 0.2)
library ('phytools')
tree <- read.tree('https://jonsmitchell.com/data/anolis.tre')
plot(tree, type='fan')#
tree$tip.label
data <- read.csv('https://jonsmitchell.com/data/svl.csv', stringsAsFactors=F, row.names=1)
data#
data[,1]
dim(data)#
typeof(data)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(tree, svl, vars=TRUE, CI=TRUE)
Ancestors#
?fastAnc
par(mar=c(0.1,0.1,0.1,0.1))#
plot(tree, type="fan", lwd=2, show.tip.label=F)#
tiplabels(pch=16, cex=0.25*Ancestors$ace)#
obj <- contMap(tree, svl, plot=F)#
plot(obj, type="fan", legend=0.7*max(nodeHeights(tree)), sig=2, fsize=c(0.7,0.9))#
fossilData <- data.frame(svl=log(c(25.4,23.2,17.7,19.7,24,31)), tip1=c("aliniger","aliniger","occultus","christophei","cristatellus","occultus"), tip2=c("chlorocyanus","coelestinus","monticola","cybotes","augusticeps","augusticeps"))#
fossilNodes<-c()
fossilNodes<-c()#
nodeN <- c()
{#
  for(i in 1:nrow(fossilData))#
    i<-1#
  if(i==1) {#
    print(Ancestors)#
  }#
}
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])#
fossilNodes[i] <- fossilData [i, "svl"]#
nodeN[i] <- Node
Node<-fastMRCA(tree, fossilData[i,"tip1"], fossilData[i,"tip2"])#
Node#
fossilNodes[i]<- fossilData[i, 'svl']#
fossilNodes[i]#
nodeN[i] <- Node
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])#
Node#
fossilNodes[i] <- fossilData [i, "svl"]#
fossilNodes[i]#
nodeN[i] <- Node
names(fossilNodes)<- nodeN#
Ancestors_withFossils<- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)#
Ancestors_withFossils#
Ancestors_woFossils<- fastAnc(tree, svl,CI=TRUE, var=TRUE)#
Ancestors_woFossils#
plot(Ancestors_withFossils$ace, Ancestors_woFossils$ace, xlab='fossils', ylab='no fossils')
install.packages('geiger')#
library('geiger')#
?fitContinuous#
fitContinuous(tree, svl, model='EB')#
fitContinuous(tree, svl, model='OU')#
fitContinuous(tree, svl, model='BM')
setwd('~/Desktop/Evolution/Tasks/Task_11')#
x <- rnorm(100, mean=5, sd=2)#
x#
y <- (x *5) + 2 + (rnorm(100, 0:0.1 ))#
y#
plot(x, y)#
abline(lm(y~x), col='red')#
coef(lm(y~x))#
y intercept = 2.193123 x intercept = 4.989395#
z <- c()#
x <- rnorm(100, mean=5, sd=2)#
for(i in 1:100) {#
  z[i]<-runif(1)#
  y<- (x* z[i]) + 2 +(rnorm(100, 0:0.1))#
  l<-coef(lm(z[1:100]~y))#
}#
pdf("2.pdf", height=4, width=4)#
plot(z[1:100], y)#
abline(lm(y~z[1:100]))#
dev.off()#
pdf("3.pdf", height=4, width=4)#
plot(c(z, -0.03))#
dev.off()
install.packages("meme")
library('meme')
library("meme")
library('meme')
install.packages('meme')#
library('meme')
install.packages('meme')
library('meme')
